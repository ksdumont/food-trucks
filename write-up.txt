The environment I would choose to support this fully featured web application capable of serving millions of concurrent users would be a Node.js application that is written in an asynchronous fashion to ensure non blocking code execution. Every feature of the application would be represented by a tiny microservice, which will enable easy horizontal scaling and decrease dependencies between features and services. 

A major consideration would be to determine how often the data from the API changes. If it changes daily, we can query the API once a day, and store the results in a cache layer. This will improve the application's performance by serving the data faster on subsequent requests. The data would be stored in memory, and would decrease the need for identical requests to the data's primary storage location, resulting in increased speed and performance, and ultimately a better user experience.

The frontend of the application would be built with React to ensure speed and efficiency by making use of the Virtual DOM. All changes are first applied to the virtual DOM and then, using diff algorithm, the minimal scope of necessary DOM operations is calculated, and finally the real DOM tree is updated accordingly. This will ensure minimum time consumed, a better user experience, and higher app performance. All of the application's state would be stored in one place, having one source of truth. 

To create a best user experience, we would want to display more than just ten results at a time. We could implement a dropdown for the user to choose how many results they would want to be displayed. The user should also be able to sort the results by nearest location, ratings, or hours. Other features, such as filtering should be implemented as well. The user should have the ability to filter food trucks that are open now, tomorrow, or any other time of their choosing. The application would need to support all of these scenarios.